# Uncomment this line to define a global platform for your project
platform :ios, '13.0'

# CocoaPods analytics sends network stats synchronously affecting flutter build latency.
ENV['COCOAPODS_DISABLE_STATS'] = 'true'

project 'Runner', {
  'Debug' => :debug,
  'Profile' => :release,
  'Release' => :release,
}

def flutter_root
  generated_xcode_build_settings_path = File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)
  unless File.exist?(generated_xcode_build_settings_path)
    raise "#{generated_xcode_build_settings_path} must exist. If you're running pod install manually, make sure flutter pub get is executed first"
  end

  File.foreach(generated_xcode_build_settings_path) do |line|
    matches = line.match(/FLUTTER_ROOT\=(.*)/)
    return matches[1].strip if matches
  end
  raise "FLUTTER_ROOT not found in #{generated_xcode_build_settings_path}. Try deleting Generated.xcconfig, then run flutter pub get"
end

require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), flutter_root)

flutter_ios_podfile_setup

target 'Runner' do
  use_frameworks!

  flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))
  target 'RunnerTests' do
    inherit! :search_paths
  end
end

post_install do |installer|
  # Helper to sanitize a single build configuration
  def sanitize_build_config(config)
    # Enforce minimum iOS version 13 to align with platform :ios, '13.0'
    config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '13.0'

    # For every build setting key, if it's String/Array, strip any token that equals '-G' or starts with '-G'
    config.build_settings.keys.each do |key|
      value = config.build_settings[key]
      next if value.nil?

      if value.is_a?(Array)
        sanitized = value.flatten.compact.map(&:to_s).reject { |t| t == '-G' || t.start_with?('-G') }
        config.build_settings[key] = sanitized
      elsif value.is_a?(String)
        tokens = value.split(' ')
        sanitized = tokens.reject { |t| t == '-G' || t.start_with?('-G') }
        config.build_settings[key] = sanitized.join(' ')
      end
    end
  end

  # Sanitize all Pods project targets
  installer.pods_project.targets.each do |target|
    flutter_additional_ios_build_settings(target)
    target.build_configurations.each { |config| sanitize_build_config(config) }
  end

  # Additionally remove any per-file COMPILER_FLAGS that contain tokens starting with '-G'
  # e.g., strings like "-GCC_WARN_INHIBIT_ALL_WARNINGS" found in PBXBuildFile settings.
  installer.pods_project.targets.each do |target|
    target.build_phases.each do |phase|
      # Only phases that may have per-file compiler flags
      next unless phase.respond_to?(:files)
      phase.files.each do |build_file|
        settings = build_file.settings
        next unless settings.is_a?(Hash)
        flags = settings['COMPILER_FLAGS']
        next unless flags.is_a?(String) && flags.include?('-G')
        tokens = flags.split(' ')
        sanitized = tokens.reject { |t| t == '-G' || t.start_with?('-G') }
        if sanitized.join(' ') != flags
          settings['COMPILER_FLAGS'] = sanitized.join(' ')
          build_file.settings = settings
        end
      end
    end
  end

  # Also sanitize user project targets (e.g., Runner and test targets)
  user_projects = installer.aggregate_targets.map(&:user_project).uniq.compact
  user_projects.each do |project|
    project.targets.each do |t|
      t.build_configurations.each { |config| sanitize_build_config(config) }
    end
    project.save
  end

  # Persist changes to the Pods project as well
  installer.pods_project.save

  # Additionally sanitize any generated xcconfig files in Target Support Files to remove '-G*' tokens
  target_support_dir = File.join(__dir__, 'Pods', 'Target Support Files')
  if Dir.exist?(target_support_dir)
    Dir.glob(File.join(target_support_dir, '**', '*.xcconfig')).each do |xcconfig_path|
      begin
        content = File.read(xcconfig_path)
        # Remove any occurrences of tokens that start with -G (e.g., ' -G', ' -Gfoo') while preserving surrounding spaces
        sanitized = content.gsub(/(?<=\s)-G\S*/, '')
        # Also handle line-start occurrences
        sanitized = sanitized.gsub(/^\s*-G\S*\s*/, '')
        if sanitized != content
          File.open(xcconfig_path, 'w') { |f| f.write(sanitized) }
        end
      rescue => e
        puts "Warning: Failed to sanitize #{xcconfig_path}: #{e}"
      end
    end
  end
end
